// <auto-generated />
using System;
using Dvchevskii.Blog.Infrastructure.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dvchevskii.Blog.Infrastructure.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    [Migration("20241025103932_v001_init_mysql")]
    partial class v001_init_mysql
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Dvchevskii.Blog.Core.Authentication.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Dvchevskii.Blog.Core.Content.Files.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Dvchevskii.Blog.Core.Content.Posts.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("longtext");

                    b.Property<int?>("HeaderImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Tagline")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HeaderImageId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Dvchevskii.Blog.Core.Authentication.Users.User", b =>
                {
                    b.OwnsOne("Dvchevskii.Blog.Core.Common.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreatedAtUtc")
                                .HasColumnType("datetime(6)");

                            b1.Property<int>("CreatedById")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("DeletedAtUtc")
                                .HasColumnType("datetime(6)");

                            b1.Property<int?>("DeletedById")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("UpdatedAtUtc")
                                .HasColumnType("datetime(6)");

                            b1.Property<int?>("UpdatedById")
                                .HasColumnType("int");

                            b1.HasKey("UserId");

                            b1.HasIndex("CreatedById");

                            b1.HasIndex("DeletedById");

                            b1.HasIndex("UpdatedById");

                            b1.ToTable("Users");

                            b1.HasOne("Dvchevskii.Blog.Core.Authentication.Users.User", "CreatedBy")
                                .WithMany()
                                .HasForeignKey("CreatedById")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("Dvchevskii.Blog.Core.Authentication.Users.User", "DeletedBy")
                                .WithMany()
                                .HasForeignKey("DeletedById");

                            b1.HasOne("Dvchevskii.Blog.Core.Authentication.Users.User", "UpdatedBy")
                                .WithMany()
                                .HasForeignKey("UpdatedById");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.Navigation("CreatedBy");

                            b1.Navigation("DeletedBy");

                            b1.Navigation("UpdatedBy");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Dvchevskii.Blog.Core.Content.Files.Image", b =>
                {
                    b.OwnsOne("Dvchevskii.Blog.Core.Common.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<int>("ImageId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreatedAtUtc")
                                .HasColumnType("datetime(6)");

                            b1.Property<int>("CreatedById")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("DeletedAtUtc")
                                .HasColumnType("datetime(6)");

                            b1.Property<int?>("DeletedById")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("UpdatedAtUtc")
                                .HasColumnType("datetime(6)");

                            b1.Property<int?>("UpdatedById")
                                .HasColumnType("int");

                            b1.HasKey("ImageId");

                            b1.HasIndex("CreatedById");

                            b1.HasIndex("DeletedById");

                            b1.HasIndex("UpdatedById");

                            b1.ToTable("Images");

                            b1.HasOne("Dvchevskii.Blog.Core.Authentication.Users.User", "CreatedBy")
                                .WithMany()
                                .HasForeignKey("CreatedById")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("Dvchevskii.Blog.Core.Authentication.Users.User", "DeletedBy")
                                .WithMany()
                                .HasForeignKey("DeletedById");

                            b1.WithOwner()
                                .HasForeignKey("ImageId");

                            b1.HasOne("Dvchevskii.Blog.Core.Authentication.Users.User", "UpdatedBy")
                                .WithMany()
                                .HasForeignKey("UpdatedById");

                            b1.Navigation("CreatedBy");

                            b1.Navigation("DeletedBy");

                            b1.Navigation("UpdatedBy");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Dvchevskii.Blog.Core.Content.Posts.Post", b =>
                {
                    b.HasOne("Dvchevskii.Blog.Core.Content.Files.Image", "HeaderImage")
                        .WithMany()
                        .HasForeignKey("HeaderImageId");

                    b.OwnsOne("Dvchevskii.Blog.Core.Common.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<int>("PostId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreatedAtUtc")
                                .HasColumnType("datetime(6)");

                            b1.Property<int>("CreatedById")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("DeletedAtUtc")
                                .HasColumnType("datetime(6)");

                            b1.Property<int?>("DeletedById")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("UpdatedAtUtc")
                                .HasColumnType("datetime(6)");

                            b1.Property<int?>("UpdatedById")
                                .HasColumnType("int");

                            b1.HasKey("PostId");

                            b1.HasIndex("CreatedById");

                            b1.HasIndex("DeletedById");

                            b1.HasIndex("UpdatedById");

                            b1.ToTable("Posts");

                            b1.HasOne("Dvchevskii.Blog.Core.Authentication.Users.User", "CreatedBy")
                                .WithMany()
                                .HasForeignKey("CreatedById")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("Dvchevskii.Blog.Core.Authentication.Users.User", "DeletedBy")
                                .WithMany()
                                .HasForeignKey("DeletedById");

                            b1.WithOwner()
                                .HasForeignKey("PostId");

                            b1.HasOne("Dvchevskii.Blog.Core.Authentication.Users.User", "UpdatedBy")
                                .WithMany()
                                .HasForeignKey("UpdatedById");

                            b1.Navigation("CreatedBy");

                            b1.Navigation("DeletedBy");

                            b1.Navigation("UpdatedBy");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("HeaderImage");
                });
#pragma warning restore 612, 618
        }
    }
}
